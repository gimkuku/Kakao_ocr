        "from google.colab import drive\n",
        "drive.mount('/content/drive')"

        "import numpy as np\n",
        "import cv2\n",
        "from google.colab.patches import cv2_imshow"

        "#같은 드라이브에서 이미지 불러오는 함수\n",
        "def get_image(fileurl):\n",
        "    file=fileurl\n",
        "    img=cv2.imread(file, cv2.IMREAD_COLOR)\n",
        "    ㄹile= cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
        "\n",
        "    cv2_imshow(img)"

        "#Kako OCR api\n",
        "import json\n",
        "\n",
        "import requests\n",
        "import sys"

        "def kakao_ocr_resize(image_path: str):\n",
        "    \"\"\"\n",
        "    ocr detect/recognize api helper\n",
        "    ocr api의 제약사항이 넘어서는 이미지는 요청 이전에 전처리가 필요.\n",
        "\n",
        "    pixel 제약사항 초과: resize\n",
        "    용량 제약사항 초과  : 다른 포맷으로 압축, 이미지 분할 등의 처리 필요. (예제에서 제공하지 않음)\n",
        "\n",
        "    :param image_path: 이미지파일 경로\n",
        "    :return:\n",
        "    \"\"\"\n",
        "    image = cv2.imread(image_path)\n",
        "    height, width, _ = image.shape\n",
        "\n",
        "    if LIMIT_PX < height or LIMIT_PX < width:\n",
        "        ratio = float(LIMIT_PX) / max(height, width)\n",
        "        image = cv2.resize(image, None, fx=ratio, fy=ratio)\n",
        "        height, width, _ = height, width, _ = image.shape\n",
        "\n",
        "        # api 사용전에 이미지가 resize된 경우, recognize시 resize된 결과를 사용해야함.\n",
        "        image_path = \"{}_resized.jpg\".format(image_path)\n",
        "        cv2.imwrite(image_path, image)\n",
        "\n",
        "        return image_path\n",
        "    return None\n",
        "\n",
        "\n",
        "def kakao_ocr(image_path: str, appkey: str):\n",
        "    \"\"\"\n",
        "    OCR api request example\n",
        "    :param image_path: 이미지파일 경로\n",
        "    :param appkey: 카카오 앱 REST API 키\n",
        "    \"\"\"\n",
        "    API_URL = 'https://dapi.kakao.com/v2/vision/text/ocr'\n",
        "\n",
        "    headers = {'Authorization': 'KakaoAK {}'.format(appkey)}\n",
        "\n",
        "    image = cv2.imread(image_path)\n",
        "    jpeg_image = cv2.imencode(\".jpg\", image)[1]\n",
        "    data = jpeg_image.tobytes()\n",
        "\n",
        "\n",
        "    return requests.post(API_URL, headers=headers, files={\"image\": data})\n"

        "#박스 자르는 함수\n",
        "\n",
        "def im_trim (img, x,y,h,w): #함수로 만든다\n",
        "    img_trim = img[y:y+h, x:x+w] #trim한 결과를 img_trim에 담는다\n",
        "    cv2.imwrite('cropimg.jpg',img_trim) \n",
        "    return img_trim #필요에 따라 결과물을 리턴\n"
    
        "def main():\n",
        "    if len(sys.argv) != 3:\n",
        "        print(\"Please run with args: $ python example.py /path/to/image appkey\")\n",
        "    image_path, appkey = '/content/drive/MyDrive/Menu/menu_crop.png', 'yourKakaoRestAPIKey'\n",
        "\n",
        "    resize_impath = kakao_ocr_resize(image_path)\n",
        "    if resize_impath is not None:\n",
        "        image_path = resize_impath\n",
        "        print(\"원본 대신 리사이즈된 이미지를 사용합니다.\")\n",
        "\n",
        "    #카카오 API에서 범위, 인식한 글씨 받기\n",
        "    output = kakao_ocr(image_path, appkey).json()\n",
        "    outputdata = json.dumps(output, ensure_ascii=False,sort_keys=True, indent=2)\n",
        "    print(\"[OCR] output:\\n{}\\n\".format(outputdata))\n",
        "\n",
        "    #받은 데이터 array로 변환\n",
        "    outputdata = json.loads(outputdata)\n",
        "\n",
        "    #boxes data만 추출\n",
        "    print(outputdata['result'][2]['boxes'][0][0])\n",
        "\n",
        "    for i in range(len(outputdata['result'])):\n",
        "    #box 모양으로 잘라서 보여주기 \n",
        "      x = outputdata['result'][i]['boxes'][0][0]\n",
        "      y = outputdata['result'][i]['boxes'][0][1]\n",
        "      w =  (outputdata['result'][i]['boxes'][1][0] -  outputdata['result'][i]['boxes'][0][0])\n",
        "      h =  (outputdata['result'][i]['boxes'][2][1] -  outputdata['result'][i]['boxes'][0][1])\n",
        "   #원본 이미지\n",
        "      org_image = cv2.imread('/content/drive/MyDrive/Menu/menu_crop.png') \n",
        "   #자른 이미지\n",
        "      img_trim = org_image[y:y+h, x:x+w]\n",
        "   #자른 이미지 보여주기\n",
        "      cv2_imshow(img_trim)\n",
        "      print(outputdata['result'][i]['recognition_words'][0])\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
